{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","prevGood","prevNeutral","prevBad","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAsBeA,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OACI,qCACI,sCAASJ,KACT,yCAAYC,KACZ,qCAAQC,KACR,uCAAUC,KACV,mDAAsBC,EAAtB,YCUGC,MAhBf,YAAyD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACrB,wBACIC,KAAK,SAELC,QAAS,kBAAMJ,EAAgBE,IAHnC,SAIKA,GAFIA,OCSFG,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,qCACI,6BAAKD,IACJC,MCKEC,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACI,mCACI,4BAAIA,OCyDDC,EApDH,WACV,MAAwBC,mBAAS,GAAjC,mBAAOlB,EAAP,KAAamB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOjB,EAAP,KAAgBmB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOhB,EAAP,KAAYmB,EAAZ,KAiBMC,EAAqB,WACzB,OAAOtB,EAAOC,EAAUC,GAO1B,OACE,qCACE,cAAC,EAAD,CAASW,MAAM,wBAAf,SACE,cAAC,EAAD,CACEP,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA5BiB,SAAAE,GACvB,OAAQA,GACN,IAAK,OACHU,GAAQ,SAAAI,GAAQ,OAAIA,EAAW,KAC/B,MACF,IAAK,UACHH,GAAW,SAAAI,GAAW,OAAIA,EAAc,KACxC,MACF,IAAK,MACHH,GAAO,SAAAI,GAAO,OAAIA,EAAU,KAC5B,MACF,QACE,aAkBR,cAAC,EAAD,CAASZ,MAAM,aAAf,SACOS,IAEG,cAAC,EAAD,CACEtB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,IACPlB,mBAlBDsB,KAAKC,MAAc,IAAP3B,EAAcsB,OAqB5B,cAAC,EAAD,CAAcN,QAAQ,4BC5ChBY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.169920e4.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n    return (\r\n        <>\r\n            <p>Good:{good}</p>\r\n            <p>Neutral:{neutral}</p>\r\n            <p>Bad:{bad}</p>\r\n            <p>Total:{total}</p>\r\n            <p>Positive feedback:{positivePercentage} %</p>\r\n        </>\r\n    );\r\n};\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Statistics;","\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction FeedbackOptions ({ options, onLeaveFeedback }) {\r\n    return options.map(option => (\r\n        <button\r\n            type=\"button\"\r\n            key={option}\r\n            onClick={() => onLeaveFeedback(option)}>\r\n            {option}\r\n        </button>\r\n    ))\r\n       \r\n};\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </>\r\n    );\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n};\r\nexport default Section;","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n    return (\r\n        <>\r\n            <p>{message}</p>\r\n        </>\r\n    );\r\n};\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n};\r\nexport default Notification;","import { useState } from 'react';\n// import React, { Component } from 'react';\n\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\n\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n   const onLeaveFeedback = option => {\n    switch (option) {\n      case 'good':\n        setGood(prevGood => prevGood + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevNeutral => prevNeutral + 1);\n        break;\n      case 'bad':\n        setBad(prevBad => prevBad + 1);\n        break;\n      default:\n        return;\n    }\n  };\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n  \n  const positivePercentage = () => {\n    return Math.round((good * 100) / countTotalFeedback())\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={onLeaveFeedback} />\n      </Section>\n<Section title=\"Statistics\">\n      {countTotalFeedback() ? (\n       \n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={positivePercentage()}\n          />\n         ) : (\n         <Notification message=\"No feedback given\" />\n      )}\n      </Section>\n    </>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}